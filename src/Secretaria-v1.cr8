'CR800 Series

'--------------------------------------------------------------------
'------------  Estacion de monitoreo de calidad de agua  ------------
'--------------------------------------------------------------------
' Autores: Agustin Allegui y Emir Dagfal

'--------------------------------------------------------------------
' Configuraciones
'--------------------------------------------------------------------
Const SendInterval = 480 'Intervalo entre [minutos]

'--------------------------------------------------------------------
' Declaracion de variables
'--------------------------------------------------------------------

Const Samples = 4 ' Muestras en cada envio
Const SampleInterval = 120  ' (SendInterval/Samples) Tiempo entre muestras [minutos] (debe ser entero)

' debug
' Public debug_str_1 As String * 50
' Public debug_num_1 As Long

' Public debug_str_2 As String * 50
' Public debug_num_2 As Long


' Variables para sesores
Dim Rs
Dim pHMult

Public BattV :   Units BattV=Volts
Public PTemp_C : Units PTemp_C=Deg C
Public DOmV :    Units DOmV=mV
Public DOppm :   Units DOppm=ppm
Public Cond :    Units Cond=mS/cm
Public Ct :      Units Ct=mS/cm
Public Temp_C :  Units Temp_C=Deg C
Public pH :      Units pH=pH

Public OBS500(4)
Alias OBS500(1)=Turb_BS   : Units Turb_BS=FBU
Alias OBS500(2)=Turb_SS   : Units Turb_SS=FNU
Alias OBS500(3)=Temp_C_2  : Units Temp_C_2=Deg_C
Alias OBS500(4)=WD_OBS    : Units WD_OBS=unitless

' Variables para modem
Public SendFSM As Long = 0  ' FSM para envio
Public SerialOutString As String * 60
Public SerialInString As String * 50

Public HexVar(5,Samples) As Long
Public sendTimeoutCount As Long = 0
Public PendingMessages As Long = 0

' Alarma antivandalica
Public alarm As Float

'--------------------------------------------------------------------
' Definicion de tablas
'--------------------------------------------------------------------

DataTable(SamplesDataTable,True,-1)
  Sample(1,DOmV,FP2)
  Sample(1,DOppm,FP2)
  Sample(1,Cond,FP2)
  Sample(1,Ct,IEEE4)
  Sample(1,Temp_C,FP2)
  Sample(1,Turb_BS,FP2)
  Sample(1,Turb_SS,FP2)
  Sample(1,Temp_C_2,FP2)
  Sample(1,WD_OBS,FP2)
  Sample(1,pH,FP2)
EndTable

DataTable(SendedBatteryTable, true, -1)
  Minimum(1,BattV,FP2,0,0)
EndTable

DataTable(Daily,True,-1)
  DataInterval(0,1440,Min,10)
  Minimum(1,BattV,FP2,False,False)
EndTable

'--------------------------------------------------------------------
' Definicion de subrutinas
'--------------------------------------------------------------------

' Lee los sensores y guarda los datos en las variables publicas.
Sub SensorsSub()
  '---------------------
  '	Datalogger
  '---------------------
  'Default CR800 Datalogger Battery Voltage measurement 'BattV'
  Battery(BattV)

  'Default CR800 Datalogger Wiring Panel Temperature measurement 'PTemp_C'
  PanelTemp(PTemp_C,_50Hz)

  '---------------------
  '	Oxigeno disuelto
  '---------------------
  'CS511 Dissolved Oxygen Probe measurements 'DOmV' and 'DOppm'
  VoltSe (DOmV,1,mV2500,2,1,0,_50Hz,1.0,0) 'Aca hice unos cambios (Nueva entrada: SE2)
  DOppm=DOmV*0.4963  'M = P(valor por tabla) / R(valor medido con M=1) = 10.03 / 20.21 = 0,4963

  '---------------------
  '	Conductividad
  '---------------------
  'CS547A Conductivity and Temperature Probe measurements 'Cond', 'Ct', and 'Temp_C'
  Const Rcable=15.48 'edit this value to the actual footage of cable on your sensor | 4' por ahora | 15.48 con el agregado de cable
  Const CellConstant=1.38 'edit this value with the Cell Constant (Kc) printed | 1,38 en nuestro caso
  'on the label of each sensor
  Const TempCoef=2 'see section 8 of the manual for an explanation of how
  'to more precisely determine the value of this coefficient

  'Make preliminary voltage measurement
  BrFull(Rs,1,mV2500,2,1,1,2500,True,True,0,250,-0.001,1)
  'Convert voltage measurement to resistance
  Rs=Rs/(1-Rs)
  'Make refined voltage measurement based on preliminary measurement
  Select Case Rs
  Case Is <1.8
    BrHalf(Rs,1,mV2500,4,1,1,2500,True,0,250,1,0)
  Case Is <9.25
    BrFull(Rs,1,mV2500,2,1,1,2500,True,True,0,250,-0.001,1)
  Case Is <280
    BrFull(Rs,1,mV250,2,1,1,2500,True,True,0,250,-0.001,1)
  EndSelect
  'Convert voltage measurement to resistance
  Rs=Rs/(1-Rs)
  'Subtract resistance errors
  Rs=Rs-(Rcable*0.000032+0.005)
  'Calculate EC
  Ct=(1/Rs)*CellConstant
  'Correct EC for ionization errors
  If Ct<0.474 Then
    Ct=Ct*0.95031-0.00378
  Else
    Ct=-0.02889+(0.98614*Ct)+(0.02846*Ct^2)
  EndIf
  'Make temperature measurement (Deg C)
  Therm107(Temp_C,1,1,2,0,250,1,0)
  'Correct EC for temperature errors
  Cond=(Ct*100)/((Temp_C-25)*TempCoef+100)
  'Trap measurements below 0.005 mS/cm threshold
  If Cond<0.005 Then Cond=0.005

  '---------------------
  '	Turbidez
  '---------------------
  'OBS500/OBS501 Smart Turbidity Meter (SDI-12) measurements 'Turb_BS', 'Turb_SS', 'Temp_C', and 'WD_OBS'
  SDI12Recorder(OBS500(),3,"0","M!",1,0,-1)

  '---------------------
  '	PH
  '---------------------
  'CSIM11 pH Probe (ISI M11-pH) measurement 'pH'
  'Calculate temperature correction multiplier
  pHMult=-1/(((Temp_C+273)/298)*59)
  'Make pH measurement
  VoltDiff(pH,1,mV2500,3,True,0,_50Hz,pHMult,6.91) ' Aca modifique el offset
EndSub

' Escribe en el buffer del modem el codigo de la alarma antivandalica.
Sub FillAlarmSub()
  SerialOutString = "AT+SBDWT=A" & CHR(13) & CHR(10)& ""  ' Guardar en el buffer de salida el mensaje de alerta
  SerialOut(ComRS232,SerialOutString,"",0,100)
EndSub

' Envia la alarma antivandalica (ya debe estar cargada en el buffer del modem)
Sub SendAlertSub()
  SerialOutString = "AT+SBDIX"& CHR(13) & CHR(10)& ""
  SerialOut(ComRS232,SerialOutString,"",0,100)
EndSub

Public timestampHex As Long
Public total As Long ' Checksum
' Envia al puerto serie el payload del mensaje encolado.
' age: Antiguedad del mensaje a enviar (1: utlimo mensaje)
Sub SetBinaryBufferSub(age)

  total = 0

  '------------------------
  ' report ID y bateria
  Dim reportId As Long
  reportId = &H03 ' * ID del reporte
  total += reportId AND &HFF

  Dim batteryHex As Long
  batteryHex = INT( (SendedBatteryTable.BattV_min(1, age) - 10)* 10 ) ' (Vbat - 10) * 10
  batteryHex = batteryHex AND &HFF
  total += batteryHex AND &HFF

  SerialOutBlock (ComRS232, (((reportId << 8) AND &HFF00) OR batteryHex)<< 16, 2)

  '------------------------
  ' Timestamp

  timestampHex = INT( SendedBatteryTable.TIMESTAMP(0,age) ) ' timestamp del datalogger (segundos desde 1970)
  timestampHex += 3 * 3600 ' Compenzacion de uso horario
  SerialOutBlock (ComRS232, timestampHex, 4) ' Escribo el valor del timestamp

  total += ((timestampHex AND       &HFF))      ' Agrego el timestamp al checksum
  total += ((timestampHex AND     &HFF00) >> 8)
  total += ((timestampHex AND   &HFF0000) >> 16)
  total += ((timestampHex AND &HFF000000) >> 24)

  '------------------------
  ' Datos de los sensores
  Dim startSample As Long
  startSample = (age - 1) * Samples + 1
  Dim i, j

  ' Agregar los valores de los sensores a una matriz
  For j = 1 To Samples
    If SamplesDataTable.DOppm(1,j) <> NAN Then
      HexVar(1,j) = (INT( SamplesDataTable.DOppm(1, startSample+j) * 10 ))		'Oxigeno en (ppm * 10)
      HexVar(2,j) = (INT( SamplesDataTable.Cond(1, startSample+j) * 1000 ))		'Conductividad en uS/cm = (mS/cm *1000)
      HexVar(3,j) = (INT( SamplesDataTable.Temp_C(1, startSample+j) * 10 ))		'Tempeatura en grados * 10
      HexVar(4,j) = (INT( SamplesDataTable.ph(1, startSample+j) * 10 ))  			'Ph en ph*10
      HexVar(5,j) = (INT( SamplesDataTable.Turb_BS(1, startSample+j) ))	'Turb en FBU
    EndIf
  Next

  ' Recorrer la matriz de valores para escribir en el buffer y calcular el checksum
  Dim Send_value As Long
  For j = 1 To Samples
    For i = 1 To 5
      Send_value = HexVar(i,j)
      ' Send_value = (j*&H10 + i) * &H0100 + (i*&H10 + j)
      total += ((Send_value AND   &HFF))    ' Calculo de checksum
      total += ((Send_value AND &HFF00)>> 8)

      SerialOutBlock (ComRS232, Send_value<< 16,2) ' Envio de la variable
    Next
  Next

  SerialOutBlock (ComRS232, total<< 16,2) ' Envio el checksum

EndSub

' Maquina de estados para enviar datos.
' Debe llamarse consecutivamente hasta que todo el proceso se complete.
Sub SendReportSub()
  Dim response As String * 30

  Select Case SendFSM
  Case Is = 0
    SerialOutString = "ATE0"& CHR(13) & CHR(10)& ""
    SerialOut(ComRS232,SerialOutString,"",0,100)
    SendFSM += 1

  Case Is = 1
    response = "OK"
    If(InStr(1,SerialInString,response,2)) Then
      SendFSM += 1
    Else
      SendFSM -= 1
    EndIf

  Case Is = 2
    SerialOutString = "AT+SBDD0"& CHR(13) & CHR(10)& ""
    SerialOut(ComRS232,SerialOutString,"",0,100)
    SendFSM += 1

  Case Is = 3
    response = "OK"
    If(InStr(1,SerialInString,response,2)) Then
      SendFSM += 1
    Else
      SendFSM -= 1
    EndIf

  Case Is = 4
    SerialOutString = "AT+SBDWB=" & (10*Samples + 6) & CHR(13) & CHR(10)& "" ' * el tamaño del payload depende del tipo de reporte
    SerialOut(ComRS232,SerialOutString,"",0,100)
    SendFSM += 1

  Case Is = 5
    response = "READY"
    If(InStr(1,SerialInString,response,2)) Then
      SetBinaryBufferSub(PendingMessages)	' Envio de datos en binario
      SendFSM += 1
    Else
      SendFSM -= 1
    EndIf

  Case Is = 6
    response = "0"
    If(InStr(1,SerialInString,response,2)) Then
      SendFSM += 1
    Else
      SendFSM -= 2  ' Volver a cargar el buffer
    EndIf

  Case Is = 7
    SerialOutString = "AT+SBDIX"& CHR(13) & CHR(10)& ""
    SerialOut(ComRS232,SerialOutString,"",0,100)
    SendFSM += 1

  Case Is = 8
    response = "+SBDIX: "
    Dim comp As Long
    comp = InStr(1,SerialInString,response,2)
    comp = HexToDec(Mid (SerialInString, comp+8, 2))

    If(comp < 3) Then ' Envio exitoso
      PendingMessages -= 1  ' Quitar este paquete de la cola de envio
    EndIf
    SendFSM = 0 ' Reiniciar la maquina de estados para el proximo envio

  EndSelect

  If (PendingMessages <= 0) Then
    PendingMessages = 0
    SendFSM = 0 ' Reiniciar la maquina de estados para el proximo envio
    FillAlarmSub()
  EndIf

EndSub

'--------------------------------------------------------------------
' Programa principal
'--------------------------------------------------------------------
'Main Program
BeginProg
  '------------------------
  ' Setup Scan
  Scan(2,Sec,1,1)
    SerialOpen(ComRS232,19200,0,0,10000) 'Open a serial port
    FillAlarmSub()
  NextScan

  '------------------------
  ' Main Scan (Loop)
  Scan(30,Sec,1,0)

    'Leer los sensores
    If TimeIntoInterval(0, SampleInterval, Min) Then
      SensorsSub()	'Lectura de sensores
      CallTable SamplesDataTable
    EndIf

    'Chequeo de alarma antivandalica
    PulseCount (alarm,1,1 ,2,0,1.0,0)
    If alarm Then
      SendAlertSub() ' Envia la alerta
    EndIf

    ' Recibir datos del puerto serie
    SerialOpen(ComRS232,19200,0,0,10000)
    SerialInRecord(ComRS232,SerialInString,0,0,0,"",01)

    ' Encolar datos en a enviar
    If TimeIntoInterval (0,SendInterval,Min) Then
      CallTable SendedBatteryTable
      sendTimeoutCount = 0  ' Reinicio el contador de timeout de los envios
      PendingMessages += 1 ' Encola un paquete para ser enviado
    EndIf

    ' Enviar datos encolados
    If(PendingMessages > 0) Then
      If(sendTimeoutCount < 30) Then
        sendTimeoutCount += 1
        SendReportSub()
      Else  ' Timeout: reinicio la maquina de estados y quedo a la espera de que se reinicie el contador.
        SendFSM = 0
        FillAlarmSub()
      EndIf
    EndIf

    CallTable Daily
  NextScan

EndProg
