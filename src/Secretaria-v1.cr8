'CR800 Series

'--------------------------------------------------------------------
'------------  Estacion de monitoreo de calidad de agua  ------------
'--------------------------------------------------------------------
' Desarrollado y manetenido por Agustin Allegui para ProMatix SRL
'
'
' Basado en el programa de Emir Dagfal

'--------------------------------------------------------------------
' Configuraciones
'--------------------------------------------------------------------
Const RESISTOR_DATA_SAVE = false  ' Activa el log de temperatura del panel por hora

Const SendInterval = 480 ' Intervalo entre envios [minutos]
Const SendTimeout = 15   ' Tiempo maximo para intentos de envios
Const CleanOBSInterval = 240 ' Tiempo entre limpieza de sensor OBS501 (debe ser divisor de SendInterval)
Const HeatingthresholdLow = 23 ' Temperatura a la que se activa la resistencia calefactora [°C]
Const HeatingthresholdHigh = 25 ' Temperatura a la que se desactiva la resistencia calefactora [°C]

'--------------------------------------------------------------------
' Constantes dependientes de configuracion
Const Samples = 4 ' Muestras en cada envio (no modificar)
Const SampleInterval = 120  ' (SendInterval/Samples) Tiempo entre muestras [minutos] (debe ser entero)
Const CleanOBSOffset = 119 ' (SampleInterval - 2) Momento del ciclo en que se limpia el sensor (1 minuto antes de la lectura)
Const CleanOBSCyclesByLoop = 2 ' (SendInterval/CleanOBSInterval) Cantidad de limpiezas en cada ciclo de envio

Const PayloadSize = 50 ' Tamaño del payload (depende del report ID elegido).
' (   1     +  1   +     4     + 10*Samples +    2      +     2    )
' (ReportID + BatV + Timestamp +  Lecturas  + OBSStatus + PanelTemp)

'--------------------------------------------------------------------
' Constantes de calibracion
'--------------------------------------------------------------------

'-------------------------
' Conductividad (CS547A)
Const Cond_cable_length_feet=19.357 ' Largo del cable [pies] (1 pie = 0.3048 m)
Const Cond_CellConstant=1.404 'Cell Constant (Kc) Impreso en el sensor u obtenido mediante procedimiento de calibracion.
Const Cond_TempCoef=2 'see section 8 of the manual for an explanation of how to more precisely determine the value of this coefficient

'-------------------------
' PH (CSIM11)
Const PH_offset = -0.1 ' Ajustado para buffer Ph=7

'-------------------------
' Oxigeno (CS511)
Const DO_P = 9.10 ' Valor por tabla segun presion atmosferica (apendice C.1 Manual)
Const DO_R = 23.804  ' valor medido en aire con M=1s


'--------------------------------------------------------------------
' Declaracion de variables
'--------------------------------------------------------------------

' ' debug
' Public debug_str_1 As String * 50
' Public debug_num_1 As Long = 0

' Public debug_str_2 As String * 50
' Public debug_num_2 As Long
' Public debug_num_3

'-------------------------
' Flags
Public Flags(3) As Boolean = 0
Alias Flags(1) = SendEnable       ' Indica que el modem no ha tenido un timeout
Alias Flags(2) = OBS500_must_open ' Indica que el OBS501 debe cerrar en este scan
Alias Flags(3) = OBS500_alert     ' Indica que se cumplio una de las condiciones de alerta en el sensor OBS501


'-------------------------
' Variables para sesores
Dim Rs
Dim PH_Mult

Public BattV :           Units BattV=Volts
Public PTemp_C :         Units PTemp_C=Deg C

Public PTemp_C_lowest :  Units PTemp_C_lowest=Deg C
Public HeatRes_on_30
Public HeatRes_on_min :      Units HeatRes_on_min=Min

Public DO_mV :         Units DO_mV=mV
Public DO_ppm :        Units DO_ppm=ppm

Public Cond :         Units Cond=mS/cm
Public Ct :           Units Ct=mS/cm
Public Cond_temp_C :  Units Cond_temp_C=Deg C

Public PH :           Units PH=PH

Public Water_temp_C : Units Water_temp_C=Deg C

Public OBS500(9)
Alias OBS500(1)=Turb_bs          : Units Turb_bs=FBU
Alias OBS500(2)=Turb_ss          : Units Turb_ss=FNU
Alias OBS500(3)=Turb_ratio       : Units Turb_ratio=FNRU
Alias OBS500(4)=Turb_temp_C      : Units Turb_temp_C=Deg C
Alias OBS500(5)=Turb_raw_bs      : Units Turb_raw_bs=V
Alias OBS500(6)=Turb_raw_ss      : Units Turb_raw_ss=V
Alias OBS500(7)=Turb_open_curr   : Units Turb_open_curr=mA
Alias OBS500(8)=Turb_close_curr  : Units Turb_close_curr=mA
Alias OBS500(9)=Turb_wet         : Units Turb_wet=YesNo

Public OBS500Open(5)
Alias OBS500Open(1) = Turb_Open_wiper_position 'Full movement of slider is about 20,000 counts. If it jams, this # will be smaller
Alias OBS500Open(2) = Turb_Open_Max_mA_cnts 'Number of times the shutter stops while opening because of max current
Alias OBS500Open(3) = Turb_Open_timeout 'Open timeout count. If the threads are stripped the slide 'will not move and this count will increase
Alias OBS500Open(4) = Turb_Open_mA : Units Turb_Open_mA=mA 'mA current of the motor
Alias OBS500Open(5) = Turb_Open_total_counts 'total number of open and close cycles

Public OBS500Close(5)
Alias OBS500Close(1) = Turb_Close_wiper_position 'Full movement of slider is about 20,000 counts. If it jams this # will be smaller
Alias OBS500Close(2) = Turb_Close_Max_mA_cnts 'Number of times the shutter stops while opening because of max current
Alias OBS500Close(3) = Turb_Close_timeout 'Close timeout count. If the threads are stripped the slide will not move and this count will increase
Alias OBS500Close(4) = Turb_Close_mA : Units Turb_Close_mA=mA 'mA current of the motor while the shutter is closing
Alias OBS500Close(5) = Turb_Close_total_counts 'total number of open and close cycles


'------------------------
' Variables para modem
Public SendFSM As Long = 0  ' FSM para envio
Public SerialInString As String * 50
Public SerialResponsePos As Long = 0

Dim HexVar(5,Samples) As Long
Public PendingMessages As Long = 0

'------------------------
' Alarma antivandalica
Public OpenPulse = 0
Public OpenCount = 0

'------------------------
' Calefaccion
Public HeatingIsOn = 0

'--------------------------------------------------------------------
' Definicion de tablas
'--------------------------------------------------------------------

DataTable(SamplesDataTable,True,-1)
  DataInterval(0,SampleInterval,Min,0)
  Sample(1,DO_mV,FP2)
  Sample(1,DO_ppm,FP2)
  Sample(1,Cond,FP2)
  Sample(1,Ct,IEEE4)
  Sample(1,Cond_temp_C,FP2)
  Sample(1,PH,FP2)
  Sample(1,Turb_bs,FP2)
  Sample(1,Turb_ss,FP2)
  Sample(1,Turb_ratio,FP2)
  Sample(1,Turb_temp_C,FP2)
  Sample(1,Turb_raw_bs,FP2)
  Sample(1,Turb_raw_ss,FP2)
  Sample(1,Turb_open_curr,FP2)
  Sample(1,Turb_close_curr,FP2)
  Sample(1,Turb_wet,Boolean)
  Sample(1,OBS500_alert,Boolean)
  Sample(1,Water_temp_C,FP2)
EndTable

DataTable(PanelStatusTable, true, -1)
  DataInterval(0,SendInterval,Min,0)
  Minimum(1,BattV,FP2,0,0)
  Minimum(1,PTemp_C_lowest,FP2,0,0)
EndTable

DataTable(TurbWipeTable, true, -1)
  'DataInterval(0,CleanOBSInterval,Min,0)
  Sample(1,Turb_Open_wiper_position,UINT2)
  Sample(1,Turb_Open_Max_mA_cnts,UINT2)
  Sample(1,Turb_Open_timeout,UINT2)
  Sample(1,Turb_Open_mA,UINT2)
  Sample(1,Turb_Open_total_counts,UINT2)
  Sample(1,Turb_Close_wiper_position,UINT2)
  Sample(1,Turb_Close_Max_mA_cnts,UINT2)
  Sample(1,Turb_Close_timeout,UINT2)
  Sample(1,Turb_Close_mA,UINT2)
  Sample(1,Turb_Close_total_counts,UINT2)
EndTable

DataTable(OpenTable, true, -1)
  Sample(1, OpenCount, UINT2)
EndTable

#If RESISTOR_DATA_SAVE Then
  DataTable(PanelTempTable, true, -1)
    DataInterval(0,1,Hr,10)
    Minimum(1,PTemp_C,FP2,False,True)
    Maximum(1,HeatRes_on_min,FP2,False,True)
  EndTable
#EndIf

'--------------------------------------------------------------------
' Definicion de subrutinas
'--------------------------------------------------------------------

' Lee los sensores y guarda los datos en las variables publicas.
Sub SensorsSub()

  '---------------------
  '	Datalogger
  '---------------------
  'Default CR800 Datalogger Battery Voltage measurement 'BattV'
  Battery(BattV)

  'Default CR800 Datalogger Wiring Panel Temperature measurement 'PTemp_C'
  PanelTemp(PTemp_C,_50Hz)

  '---------------------
  '	Oxigeno disuelto
  '---------------------
  'CS511 Dissolved Oxygen Probe measurements 'DO_mV' and 'DO_ppm'
  VoltSe(DO_mV,1,mV2500,2,1,0,_50Hz,1.0,0)
  DO_ppm = DO_mV * (DO_P/ DO_R)  'M = P(valor por tabla) / R(valor medido en aire con M=1)

  '---------------------
  '	Conductividad
  '---------------------
  'Make preliminary voltage measurement
  BrFull(Rs,1,mV2500,2,1,1,2500,True,True,0,250,-0.001,1)
  'Convert voltage measurement to resistance
  Rs=Rs/(1-Rs)
  'Make refined voltage measurement based on preliminary measurement
  Select Case Rs
  Case Is <1.8
    BrHalf(Rs,1,mV2500,4,1,1,2500,True,0,250,1,0)
  Case Is <9.25
    BrFull(Rs,1,mV2500,2,1,1,2500,True,True,0,250,-0.001,1)
  Case Is <280
    BrFull(Rs,1,mV250,2,1,1,2500,True,True,0,250,-0.001,1)
  EndSelect
  'Convert voltage measurement to resistance
  Rs=Rs/(1-Rs)
  'Subtract resistance errors
  Rs=Rs-(Cond_cable_length_feet*0.000032+0.005)
  'Calculate EC
  Ct=(1/Rs)*Cond_CellConstant
  'Correct EC for ionization errors
  If Ct<0.474 Then
    Ct=Ct*0.95031-0.00378
  Else
    Ct=-0.02889+(0.98614*Ct)+(0.02846*Ct^2)
  EndIf
  'Make temperature measurement (Deg C)
  Therm107(Cond_temp_C,1,1,2,0,250,1,0)
  'Correct EC for temperature errors
  Cond=(Ct*100)/((Cond_temp_C-25)*Cond_TempCoef+100)
  'Trap measurements below 0.005 mS/cm threshold
  If Cond<0.005 Then Cond=0.005

  '---------------------
  '	Turbidez
  '---------------------
  'OBS500/OBS501 Smart Turbidity Meter (SDI-12) measurements 'Turb_BS', 'Turb_SS', 'Turb_temp_C´', and 'WD_OBS'
  SDI12Recorder(OBS500(),3,"0","M6!",1,0,-1)
  If(Turb_wet = 1) Then
    OBS500_alert = true
  EndIf

  '---------------------
  '	Temperatura agua
  '---------------------
  ' Seleccionar la temperatura medida por un sensor
  Water_temp_C = Turb_temp_C ' Usando sensor de turbidez
  ' Water_temp_C = Cond_temp_C ' Usando sensor de conductividad

  '---------------------
  '	PH
  '---------------------
  'CSIM11 PH Probe (ISI M11-PH) measurement 'PH'
  'Calculate temperature correction multiplier
  PH_Mult=-1/(((Water_temp_C+273)/298)*59)
  'Make PH measurement
  VoltDiff(PH,1,mV2500,3,True,0,_50Hz,1.0,0)
  PH = PH * PH_Mult
  PH = PH + 7 + PH_offset

EndSub


Public timestampHex As Long
Public total As Long ' Checksum
Public OBSStatus As Long
' Envia al puerto serie el payload del mensaje encolado.
' PendingMessages: Antiguedad del mensaje a enviar (1: utlimo mensaje)
Sub SetBinaryBufferSub()

  total = 0

  '------------------------
  ' Report ID 
  Dim reportId As Long
  reportId = &H05 ' * ID del reporte
  SerialOutBlock (Com1, reportId << 24, 1)
  total += reportId AND &HFF

  '------------------------
  ' Bateria
  Dim batteryHex As Long
  batteryHex = INT( (PanelStatusTable.BattV_min(1, PendingMessages) - 10)* 10 ) ' (Vbat - 10) * 10
  batteryHex = batteryHex AND &HFF
  SerialOutBlock (Com1, batteryHex << 24, 1)
  total += batteryHex AND &HFF

  '------------------------
  ' Timestamp

  timestampHex = INT( PanelStatusTable.TIMESTAMP(0,PendingMessages) ) ' timestamp del datalogger (segundos desde 1970)
  timestampHex += 3 * 3600 ' Compenzacion de uso horario (para enviar el timestamp en UTC)
  SerialOutBlock (Com1, timestampHex, 4) ' Escribo el valor del timestamp

  total += ((timestampHex AND       &HFF))      ' Agrego el timestamp al checksum
  total += ((timestampHex AND     &HFF00) >> 8)
  total += ((timestampHex AND   &HFF0000) >> 16)
  total += ((timestampHex AND &HFF000000) >> 24)

  '------------------------
  ' Datos de los sensores
  Dim startSample As Long
  startSample = (PendingMessages - 1) * Samples
  Dim recordedAlert As Boolean
  recordedAlert = False
  Dim MaxCurrent = 0
  Dim i, j
  ' Agregar los valores de los sensores a una matriz
  For j = 1 To Samples
    HexVar(1,j) = (INT( SamplesDataTable.DO_ppm(1, startSample+j) * 10 ))		'Oxigeno en (ppm * 10)
    HexVar(2,j) = (INT( SamplesDataTable.Cond(1, startSample+j) * 1000 ))		'Conductividad en uS/cm = (mS/cm *1000)
    HexVar(3,j) = (INT( SamplesDataTable.Water_temp_C(1, startSample+j) * 10 ))		'Tempeatura en grados * 10
    HexVar(4,j) = (INT( SamplesDataTable.ph(1, startSample+j) * 10 ))  			'Ph en ph*10
    HexVar(5,j) = (INT( SamplesDataTable.Turb_bs(1, startSample+j) ))	      'Turb en FBU
    If SamplesDataTable.Turb_open_curr(1, startSample+j) > MaxCurrent Then
      MaxCurrent = SamplesDataTable.Turb_open_curr(1, startSample+j)
    EndIf
    If SamplesDataTable.Turb_close_curr(1, startSample+j) > MaxCurrent Then
      MaxCurrent = SamplesDataTable.Turb_close_curr(1, startSample+j)
    EndIf
    If SamplesDataTable.OBS500_alert(1, startSample+j) = True Then
      recordedAlert = True
    EndIf
  Next

  ' Recorrer la matriz de valores para escribir en el buffer y calcular el checksum
  Dim Send_value As Long
  For j = 1 To Samples
    For i = 1 To 5
      Send_value = HexVar(i,j)
      ' Send_value = (j*&H10 + i) * &H0100 + (i*&H10 + j)
      total += ((Send_value AND   &HFF))    ' Agregar al checksum
      total += ((Send_value AND &HFF00)>> 8)
      SerialOutBlock (Com1, Send_value<< 16,2) ' Envio de la variable
    Next
  Next

  '------------------------
  ' Estado del sensor OBS501
  OBSStatus = MaxCurrent
  If OBSStatus > &H7FFF Then
    OBSStatus = &H7FFF
  EndIf
  If recordedAlert = True Then
    OBSStatus = OBSStatus + &H8000
  EndIf

  SerialOutBlock (Com1, OBSStatus<< 16,2)
  total += ((OBSStatus AND   &HFF))    ' Calculo de checksum
  total += ((OBSStatus AND &HFF00)>> 8)


  '------------------------
  ' Temperatura minima panel
  Dim PTemp_C_lowest_hex As Long
  PTemp_C_lowest_hex = INT( (PanelStatusTable.PTemp_C_lowest_min(1, PendingMessages) + 100 )* 10 )
  PTemp_C_lowest_hex = PTemp_C_lowest_hex AND &HFFFF
  SerialOutBlock (Com1, PTemp_C_lowest_hex<< 16, 2)
  total += ((PTemp_C_lowest_hex AND   &HFF))
  total += ((PTemp_C_lowest_hex AND &HFF00)>> 8)

  '------------------------
  ' Envio de checksum
  SerialOutBlock (Com1, total<< 16,2) ' Envio el checksum

EndSub

' Maquina de estados para enviar datos.
' Debe llamarse consecutivamente hasta que todo el proceso se complete.
Sub SendReportSub()
  Select Case SendFSM
  Case Is = 0
    SerialResponsePos = SerialOut(Com1, "AT+SBDD0"& CHR(13) & CHR(10)& "", "0", 1, 100)
    If SerialResponsePos <> 0 Then
      SerialOut(Com1, "AT+SBDWB=", "", 0, 100)
      SerialOut(Com1, PayloadSize, "", 0, 100)
      SerialFlush(Com1)
      SerialOut(Com1, CHR(13) & CHR(10)& "", "READY", 1, 500)
      SetBinaryBufferSub()
      SerialResponsePos = SerialOut(Com1,"","0", 1, 500)
      SerialIn(SerialInString,Com1,100,-1,49)
      SerialResponsePos = InStr(1,"0",SerialInString,2)
      If SerialResponsePos <> 0 Then
        ' SerialOut(Com1, "AT+SBDS" & CHR(13) & CHR(10) & "", "OK", 1, 100) ' Verificar que el buffer este cargado
        ' SerialOut(Com1, "AT+SBDTC" & CHR(13) & CHR(10) & "", "OK", 1, 100) ' Verificar que el buffer este cargado
        SerialOut(Com1,"AT+SBDIX"& CHR(13) & CHR(10)& "","",0,100)
        SendFSM += 1
      EndIf
    EndIf

  Case Is = 1
    SerialIn(SerialInString,Com1,100,-1,49) ' recibir datos del puerto serie
    SerialResponsePos = InStr(1,SerialInString, "+SBDIX: ",2)
    If(SerialResponsePos <> 0) Then
      Dim sendStatus As Long
      sendStatus = HexToDec(Mid (SerialInString, SerialResponsePos+8, 2))
      If sendStatus <= 4 Then
        PendingMessages -= 1
      EndIf
    EndIf
    SendFSM = 0
  EndSelect

  If (PendingMessages <= 0) Then
    PendingMessages = 0
    SendFSM = 0 ' Reiniciar la maquina de estados para el proximo envio
  EndIf

EndSub

'--------------------------------------------------------------------
' Programa principal
'--------------------------------------------------------------------
'Main Program
BeginProg
  '------------------------
  ' Setup
  SerialOpen(Com1,19200,3,100000,1000) ' Abrir puerto serial con output delay de 100ms
  SerialResponsePos = SerialOut(Com1, "ATE0" & CHR(13) & "", "OK", 1, 500) ' Desactivar el eco del modem
  SerialResponsePos = SerialOut(Com1, "AT&K0" & CHR(13) & "", "OK", 1, 500) ' Desactivar el flow control
  SerialResponsePos = SerialOut(Com1, "AT&W0" & CHR(13) & "", "OK", 1, 500) ' Desactivar el flow control
  SerialResponsePos = SerialOut(Com1, "AT&Y0" & CHR(13) & "", "OK", 1, 500) ' Desactivar el flow control

  Scan(30,Sec,1,1)
    PTemp_C_lowest = 999
    PulseCount(OpenPulse,1,1,2,0,1.0,0)
    SendEnable = False
    SDI12Recorder(OBS500Open(),3,0,"M3!",1,0,-1) 'Open wiper
    CallTable TurbWipeTable
  NextScan

  '--------------------------------------------------------------------
  ' Main Scan (Loop)
  Scan(30,Sec,1,0)

    '------------------------
    ' Chequeo de alarma de apertura
    PulseCount(OpenPulse,1,1,2,0,1.0,0)
    If OpenPulse > 0 Then
      OpenCount += 1
      CallTable OpenTable
      SerialOut(Com1,"AT+SBDWT=A" & CHR(13) & CHR(10)& "","OK",1,500)
      SerialOut(Com1,"AT+SBDIX"& CHR(13) & CHR(10)& "","",0,100)
    EndIf

    '------------------------
    ' Limpieza de sensor de turbidez
    If OBS500_alert = False Then  ' No activar cuando hubo algun problema
      If OBS500_must_open = True Then  ' Cerrar cuando se cumple CleanOBSOffset y abrir en el siguiente scan
        OBS500_must_open = False
        SDI12Recorder(OBS500Open(),3,0,"M3!",1,0,-1) 'Open wiper
        If TurbWipeTable.Turb_Open_total_counts(1) >= Turb_Open_total_counts Then
          OBS500_alert = true
        EndIf
        If Turb_Open_timeout > 0 Then
          OBS500_alert = true
        EndIf
        CallTable TurbWipeTable
      EndIf

      If TimeIntoInterval(CleanOBSOffset, CleanOBSInterval, Min) Then
        SDI12Recorder(OBS500Close(),3,0,"M7!",1,0,-1) 'Close wiper
        If Turb_Close_timeout > 0 Then
          OBS500_alert = true
        EndIf
        OBS500_must_open = true
      EndIf
    EndIf

    '------------------------
    'Leer los sensores
    If TimeIntoInterval(0, SampleInterval, Min) Then
      SensorsSub()	'Lectura de sensores
      CallTable SamplesDataTable
    EndIf

    '------------------------
    ' Calefaccion
    PanelTemp(PTemp_C,_50Hz)
    If PTemp_C_lowest > PTemp_C Then 'Guardar temperatura minima alcanzada
      PTemp_C_lowest = PTemp_C
    EndIf

    If PTemp_C <= HeatingthresholdLow Then
      HeatingIsOn = 1
    EndIf

    If PTemp_C > HeatingthresholdHigh Then
      HeatingIsOn = 0
    EndIf

    If HeatingIsOn Then
      HeatRes_on_30 +=1
    EndIf
    SW12(HeatingIsOn)

    HeatRes_on_min = HeatRes_on_30/2
    #If RESISTOR_DATA_SAVE Then
      CallTable(PanelTempTable)
    #EndIf
    If TimeIntoInterval(0,60,Min) Then
      HeatRes_on_30 = 0
    EndIf

    ' Encolar datos en a enviar
    If TimeIntoInterval (0,SendInterval,Min) Then
      CallTable PanelStatusTable
      PTemp_C_lowest = 999 ' Reiniciar lectura de temperatura minima
      PendingMessages += 1 ' Encola un paquete para ser enviado
      SendEnable = True
    EndIf

    ' Timeout de envio de datos
    If(TimeIntoInterval(SendTimeout, SendInterval, Min))
      SendEnable = False
    EndIf

    ' Enviar datos encolados
    If(SendEnable = True)
      If(PendingMessages > 0) Then
        SendReportSub()
      Else
        PendingMessages = 0 ' Si es menor a 0, igualar a 0
      EndIf
    Else
      SendFSM = 0 ' Mantener sendFSM reseteada mientras no se este usando
    EndIf

  NextScan

EndProg
