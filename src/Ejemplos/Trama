'Declare Variables and Units
Dim Rs
Dim pHMult
Public BattV
Public PTemp_C
Public DOmV
Public DOppm
Public Cond
Public Ct
Public Temp_C
Public OBS500(4)
Public pH

Alias OBS500(1)=Turb_BS
Alias OBS500(2)=Turb_SS
Alias OBS500(3)=Temp_C_2
Alias OBS500(4)=WD_OBS

Units BattV=Volts
Units PTemp_C=Deg C
Units DOmV=mV
Units DOppm=ppm
Units Cond=mS/cm
Units Ct=mS/cm
Units Temp_C=Deg C
Units pH=pH
Units Turb_BS=FBU
Units Turb_SS=FNU
Units Temp_C_2=Deg C
Units WD_OBS=unitless

Public SerialOutString As String * 60
Public SerialInString As String * 30
Public OutputString As String * 50
Public HexVar(5,2) As String * 4
Public StrVar(5,2) As String * 4

'Define Data Tables
DataTable(LogTable,True,-1)
  Sample(1,SerialInString,String)
  Sample(1,OutputString,String)
  Sample(1,SerialOutString,String)
EndTable

DataTable(Minute,True,-1)
	DataInterval(0,10,Min,10)
	Average(1,DOmV,FP2,0)
	Average(1,DOppm,FP2,0)
	Average(1,Cond,FP2,0)
	Average(1,Ct,IEEE4,0)
	Average (1,Temp_C,FP2,0)
	Average(1,Turb_BS,FP2,0)
	Average(1,Turb_SS,FP2,0)
	Average(1,Temp_C_2,FP2,0)
	Average(1,WD_OBS,FP2,0)
	Average(1,pH,FP2,0)
EndTable

DataTable(Hourly,True,-1)
	DataInterval(0,60,Min,10)
	Sample(1,DOmV,FP2)
	Sample(1,DOppm,FP2)
	Sample(1,Cond,FP2)
	Sample(1,Ct,IEEE4)
	Sample(1,Temp_C,FP2)
	Sample(1,Turb_BS,FP2)
	Sample(1,Turb_SS,FP2)
	Sample(1,Temp_C_2,FP2)
	Sample(1,WD_OBS,FP2)
	Sample(1,pH,FP2)
EndTable

DataTable(Daily,True,-1)
	DataInterval(0,1440,Min,10)
	Minimum(1,BattV,FP2,False,False)
EndTable

' Sensors sub
Sub SensorsSub()
  'Default CR800 Datalogger Battery Voltage measurement 'BattV'
		Battery(BattV)
		'Default CR800 Datalogger Wiring Panel Temperature measurement 'PTemp_C'
		PanelTemp(PTemp_C,_50Hz)
		'CS511 Dissolved Oxygen Probe measurements 'DOmV' and 'DOppm'
		VoltSe (DOmV,1,mV2500,2,1,0,_50Hz,1.0,0) 'Aca hice unos cambios (Nueva entrada: SE2)
		DOppm=DOmV*0.34
		'CS547A Conductivity and Temperature Probe measurements 'Cond', 'Ct', and 'Temp_C'
		'Make preliminary voltage measurement
		BrFull(Rs,1,mV2500,2,1,1,2500,True,True,0,250,-0.001,1)
		'Convert voltage measurement to resistance
		Rs=Rs/(1-Rs)
		'Make refined voltage measurement based on preliminary measurement
		Select Case Rs
			Case Is <1.8
				BrHalf(Rs,1,mV2500,4,1,1,2500,True,0,250,1,0)
			Case Is <9.25
				BrFull(Rs,1,mV2500,2,1,1,2500,True,True,0,250,-0.001,1)
			Case Is <280
				BrFull(Rs,1,mV250,2,1,1,2500,True,True,0,250,-0.001,1)
		EndSelect
		'Convert voltage measurement to resistance
		Rs=Rs/(1-Rs)
		'Subtract resistance errors
		Rs=Rs-(2.5*0.000032+0.005)
		'Calculate EC
		Ct=(1/Rs)*1.5
		'Correct EC for ionization errors
		If Ct<0.474 Then
			Ct=Ct*0.95031-0.00378
		Else
			Ct=-0.02889+(0.98614*Ct)+(0.02846*Ct^2)
		EndIf
		'Make temperature measurement (Deg C)
		Therm107(Temp_C,1,1,2,0,250,1,0)
		'Correct EC for temperature errors
		Cond=(Ct*100)/((Temp_C-25)*2+100)
		'Trap measurements below 0.005 mS/cm threshold
		If Cond<0.005 Then Cond=0.005
    'OBS500/OBS501 Smart Turbidity Meter (SDI-12) measurements 'Turb_BS', 'Turb_SS', 'Temp_C', and 'WD_OBS'
		If TimeIntoInterval(0,1,Min) Then
			SDI12Recorder(OBS500(),3,"0","M!",1,0,-1)
		EndIf
		'CSIM11 pH Probe (ISI M11-pH) measurement 'pH'
		'Calculate temperature correction multiplier
		pHMult=-1/(((Temp_C+273)/298)*59)
		'Make pH measurement
		VoltDiff(pH,1,mV2500,3,True,0,_50Hz,pHMult,7)
EndSub

Sub SetBufferSub
	Dim i, j

	For j = 1 to 2
		HexVar(1,j) = Hex(INT( Minute.DOppm_Avg(1,j) * 10 ))		'Oxigeno en (ppm * 10)
		HexVar(2,j) = Hex(INT( Minute.Cond_Avg(1,j) * 1000 ))	'Conductividad en uS/cm = (mS/cm *1000)
		HexVar(3,j) = Hex(INT( Minute.Temp_C_Avg(1,j) * 10 ))	'Tempeatura en grados * 10
		HexVar(4,j) = Hex(INT( Minute.ph_Avg(1,j) * 10 ))		'Ph en ph*10
		HexVar(5,j) = Hex(INT( Minute.Turb_BS_Avg(1,j) / 10 ))	'Turb en FBU*10
	Next

	For j = 1 To 2
		For i = 1 To 5
			StrVar(i,j)="0000"
			MoveBytes(StrVar(i,j),4-Len(HexVar(i,j)),HexVar(i,j),0,Len(HexVar(i,j)))
		Next
	Next

  Public HexBatt As String * 4
	HexBatt = Hex(INT((BattV - 10)*100))	'Bateria en (V - 10)*10
	
	OutputString = "0000"
	MoveBytes(OutputString,4-Len(HexBatt),HexBatt,0,Len(HexBatt))

	For j = 1 To 2
		For i = 1 To 5
			OutputString = OutputString & StrVar(i,j)
		Next
	Next
		
	SerialOutString = "AT+SBDWT=" & OutputString & CHR(13) & CHR(10)& ""
	SerialOut(Com1,SerialOutString,"",0,100)
	
EndSub 

Public State As Long = 0  'Estado del envio
Const SendInterval = 1 'Intervalo entre envios en hs
Const ScanInterval = 30 'Intervalo entre scans en seg
Public SendFlag(1) As Boolean = False  'Flag de envio

'Main Program
BeginProg
	'Main Scan
	Scan(30,Sec,1,0)
		SensorsSub()
		
    SerialInRecord(Com1,SerialInString,0,0,0,"",01)

    SerialOpen(Com1,19200,16,0,10000) 'Open a serial port
   
    If TimeIntoInterval (0,SendInterval,Min) Then
      SendFlag(1)=true  'Activa la rutina de envio
    EndIf
    
    If(SendFlag(1)) Then
      Select Case State
  			Case Is = 0
  				SerialOutString = "AT+SBDD0"& CHR(13) & CHR(10)& ""
  				SerialOut(Com1,SerialOutString,"",0,100)
  			Case Is = 1
  				SetBufferSub()
  			Case Is = 2
  				SerialOutString = "AT+SBDIX"& CHR(13) & CHR(10)& ""
  				'SerialOut(Com1,SerialOutString,"",0,100)
  		EndSelect
        
  		State = State + 1
  		If State > 2  Then
  			State = 0
  			SendFlag(1) = False
  		EndIf
      CallTable LogTable
    EndIf

		'Call Data Tables and Store Data
		
		CallTable Minute
		CallTable Hourly
		CallTable Daily
	NextScan
	
EndProg